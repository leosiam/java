บทเรียนเรื่องคลาส (Class) ใน Java
บทที่ 1: ความเข้าใจเบื้องต้นเกี่ยวกับคลาส
หัวข้อย่อย:
คลาสคืออะไร
การสร้างคลาส
การสร้างวัตถุ (Object) จากคลาส
คลาสคืออะไร:
คลาสเป็นแม่แบบ (template) หรือแบบแปลน (blueprint) ที่ใช้ในการสร้างวัตถุ (object) ซึ่งคลาสประกอบด้วยข้อมูล (attributes) และพฤติกรรม (methods)

การสร้างคลาส:

public class Dog {
    // ข้อมูล (Attributes)
    String name;
    int age;
    
    // พฤติกรรม (Methods)
    void bark() {
        System.out.println("Woof!");
    }
}

การสร้างวัตถุจากคลาส:

public class Main {
    public static void main(String[] args) {
        Dog myDog = new Dog(); // การสร้างวัตถุจากคลาส Dog
        myDog.name = "Buddy";
        myDog.age = 3;
        myDog.bark(); // เรียกใช้งานเมธอด bark
    }
}

บทที่ 2: Constructor และการใช้งาน
หัวข้อย่อย:
Constructor คืออะไร
การสร้าง Constructor
การใช้งาน Constructor ในการสร้างวัตถุ
Constructor คืออะไร:
Constructor คือเมธอดพิเศษที่ถูกเรียกใช้งานเมื่อมีการสร้างวัตถุใหม่จากคลาส ใช้สำหรับการกำหนดค่าเริ่มต้นให้กับวัตถุ

การสร้าง Constructor:

public class Dog {
    String name;
    int age;
    
    // Constructor
    public Dog(String name, int age) {
        this.name = name;
        this.age = age;
    }
    
    void bark() {
        System.out.println("Woof!");
    }
}

การใช้งาน Constructor:

public class Main {
    public static void main(String[] args) {
        Dog myDog = new Dog("Buddy", 3); // การสร้างวัตถุด้วย Constructor
        myDog.bark();
    }
}

บทที่ 3: Encapsulation และการใช้งาน Access Modifiers
หัวข้อย่อย:
Encapsulation คืออะไร
การใช้ Access Modifiers (public, private, protected)
การใช้ Getter และ Setter
Encapsulation คืออะไร:
Encapsulation เป็นการซ่อนรายละเอียดการทำงานภายในของคลาส และให้การเข้าถึงข้อมูลผ่านเมธอดสาธารณะ (public methods)

การใช้ Access Modifiers:

public class Dog {
    private String name; // ใช้ private เพื่อซ่อนข้อมูล
    private int age;
    
    public Dog(String name, int age) {
        this.name = name;
        this.age = age;
    }
    
    // Getter และ Setter
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    void bark() {
        System.out.println("Woof!");
    }
}

การใช้งาน Encapsulation:

public class Main {
    public static void main(String[] args) {
        Dog myDog = new Dog("Buddy", 3);
        myDog.setName("Max"); // ใช้ Setter เพื่อเปลี่ยนชื่อ
        System.out.println(myDog.getName()); // ใช้ Getter เพื่อรับค่าชื่อ
        myDog.bark();
    }
}

บทที่ 4: Inheritance และการสืบทอดคลาส
หัวข้อย่อย:
Inheritance คืออะไร
การสร้างคลาสที่สืบทอดจากคลาสอื่น
การใช้คำสั่ง super
Inheritance คืออะไร:
Inheritance เป็นกระบวนการที่คลาสหนึ่ง (subclass) สามารถสืบทอดคุณสมบัติและพฤติกรรมจากคลาสอื่น (superclass)

การสร้างคลาสที่สืบทอดจากคลาสอื่น:

// คลาส Superclass
public class Animal {
    String name;
    
    void eat() {
        System.out.println("Eating...");
    }
}

// คลาส Subclass
public class Dog extends Animal {
    int age;
    
    void bark() {
        System.out.println("Woof!");
    }
}

การใช้คำสั่ง super:

public class Animal {
    String name;

    Animal(String name) {
        this.name = name;
    }

    void eat() {
        System.out.println("Eating...");
    }
}

public class Dog extends Animal {
    int age;

    Dog(String name, int age) {
        super(name); // เรียกใช้งาน Constructor ของ superclass
        this.age = age;
    }

    void bark() {
        System.out.println("Woof!");
    }
}

การใช้งาน Inheritance:

public class Main {
    public static void main(String[] args) {
        Dog myDog = new Dog("Buddy", 3);
        myDog.eat(); // เรียกใช้งานเมธอดจาก superclass
        myDog.bark();
    }
}

บทที่ 5: Polymorphism และการใช้ Overriding
หัวข้อย่อย:
Polymorphism คืออะไร
การใช้ Overriding เมธอด
การใช้งาน Polymorphism ในโปรแกรม
Polymorphism คืออะไร:
Polymorphism เป็นความสามารถของวัตถุที่สามารถแสดงพฤติกรรมที่แตกต่างกันได้ แม้ว่าจะถูกเรียกผ่านทางอ้างอิงประเภทเดียวกัน

การใช้ Overriding เมธอด:

public class Animal {
    void makeSound() {
        System.out.println("Some sound...");
    }
}

public class Dog extends Animal {
    @Override
    void makeSound() {
        System.out.println("Woof!");
    }
}
การใช้งาน Polymorphism:

java
คัดลอกโค้ด
public class Main {
    public static void main(String[] args) {
        Animal myAnimal = new Dog(); // Polymorphism
        myAnimal.makeSound(); // จะเรียกใช้งานเมธอด makeSound ของ Dog
    }
}

สรุป
การใช้คลาสใน Java เป็นพื้นฐานสำคัญในการเขียนโปรแกรมเชิงวัตถุ บทเรียนนี้ครอบคลุมการสร้างคลาสและวัตถุ การใช้ Constructor และ Encapsulation การสืบทอดคลาส (Inheritance) และการใช้งาน Polymorphism ซึ่งจะช่วยให้นักเรียนเข้าใจและสามารถนำไปประยุกต์ใช้ในการเขียนโปรแกรมได้อย่างมีประสิทธิภาพ
