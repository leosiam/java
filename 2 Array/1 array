#ในภาษา Java, array เป็นวิธีที่ใช้เก็บข้อมูลหลายๆ อันในตัวแปรเดียวกันซึ่งมีขนาดคงที่และมีประเภทข้อมูลเดียวกัน. นี่คือแนวทางพื้นฐานสำหรับการประกาศและใช้งาน array ใน Java:

#การประกาศ Array
#คุณสามารถประกาศ array ใน Java ได้ด้วยวิธีต่างๆ นี่คือตัวอย่างสำหรับประกาศ array ของ integers:


int[] numbers;

#สร้าง Array
#หลังจากประกาศแล้ว คุณต้องสร้าง array โดยระบุขนาดของมัน:


numbers = new int[5]; // สร้าง array ขนาด 5

#การกำหนดค่าและการเข้าถึง Array
#คุณสามารถกำหนดค่าและเข้าถึงข้อมูลใน array ด้วย index (เริ่มจาก 0):


numbers[0] = 10; // กำหนดค่าตำแหน่งแรกใน array เป็น 10
int x = numbers[0]; // อ่านค่าจากตำแหน่งแรกของ array

#การเริ่มต้น Array พร้อมค่า
#คุณยังสามารถประกาศและเริ่มต้น array พร้อมกับค่าตั้งต้นได้เช่นกัน:


int[] numbers = {10, 20, 30, 40, 50};

#การวนลูปผ่าน Array
#การใช้ loop เพื่อเข้าถึงหรือดำเนินการกับสมาชิกทั้งหมดใน array นั้นทำได้ง่ายด้วย loops เช่น for หรือ foreach:

for (int i = 0; i < numbers.length; i++) {
    System.out.println(numbers[i]);
}

// หรือใช้ enhanced for loop
for (int number : numbers) {
    System.out.println(number);
}

===============================================================
#การส่ง Array เป็นพารามิเตอร์
#คุณสามารถส่ง array ไปยัง method เพื่อให้ method นั้นสามารถเข้าถึงหรือแก้ไขข้อมูลใน array ได้. นี่คือตัวอย่าง method ที่รับ array ของ integers และพิมพ์ค่าทั้งหมด:


public static void printArray(int[] array) {
    for (int element : array) {
        System.out.println(element);
    }
}

public static void main(String[] args) {
    int[] numbers = {10, 20, 30, 40, 50};
    printArray(numbers); // ส่ง array ไปยัง method
}

#การส่งค่ากลับเป็น Array จาก Method
#Methods สามารถสร้างและส่งค่ากลับเป็น array. ตัวอย่างเช่น, สร้าง method ที่สร้างและส่งค่ากลับเป็น array ของ integers:

public static int[] createArray(int size, int initialValue) {
    int[] array = new int[size];
    Arrays.fill(array, initialValue);
    return array;
}

public static void main(String[] args) {
    int[] numbers = createArray(5, 100); // สร้าง array ขนาด 5 ที่มีค่าเริ่มต้น 100 ทุกตัว
    printArray(numbers);
}

===============================================================
#1. เรียงลำดับ Array
#Java มีคลาส Arrays ที่มี method sort() สำหรับเรียงลำดับ array ของ primitive types หรือ objects. ตัวอย่างการเรียงลำดับ array ของ integers:


import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        int[] numbers = {5, 2, 8, 3, 1};
        Arrays.sort(numbers); // เรียงลำดับจากน้อยไปมาก
        System.out.println(Arrays.toString(numbers)); // พิมพ์ array ที่เรียงลำดับแล้ว
    }
}

#2. เรียงลำดับ Object
#หากต้องการเรียงลำดับ array หรือ list ของ objects, คุณต้องใช้ Comparator หรือ Comparable:
#Comparable: เป็น interface ที่ช่วยให้ objects สามารถเปรียบเทียบเพื่อเรียงลำดับได้เอง

public class Person implements Comparable<Person> {
    private String name;
    private int age;

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    @Override
    public int compareTo(Person other) {
        return Integer.compare(this.age, other.age); // เรียงลำดับตามอายุ
    }

    @Override
    public String toString() {
        return this.name + ": " + this.age;
    }
}
Comparator: เป็น interface ที่ให้การเปรียบเทียบแบบกำหนดเอง:

import java.util.*;

public class AgeComparator implements Comparator<Person> {
    @Override
    public int compare(Person p1, Person p2) {
        return Integer.compare(p1.getAge(), p2.getAge());
    }
}

public class Main {
    public static void main(String[] args) {
        List<Person> people = new ArrayList<>();
        people.add(new Person("Alice", 22));
        people.add(new Person("Bob", 30));
        people.add(new Person("Charlie", 25));

        Collections.sort(people, new AgeComparator()); // เรียงลำดับโดย Comparator
        for (Person p : people) {
            System.out.println(p);
        }
    }
}

#3. เรียงลำดับ Collection
#สำหรับ collections เช่น ArrayList, Java มีคลาส Collections ที่มี method sort():

import java.util.Collections;
import java.util.List;
import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        List<Integer> numbers = new ArrayList<>();
        numbers.add(5);
        numbers.add(2);
        numbers.add(8);
        numbers.add(3);
        numbers.add(1);

        Collections.sort(numbers); // เรียงลำดับจากน้อยไปมาก
        System.out.println(numbers); // พิมพ์ list ที่เรียงลำดับแล้ว
    }
}
===================================================================================
#1. การค้นหาแบบเชิงเส้น (Linear Search) linearSearch(data, key);
#การค้นหาแบบเชิงเส้นเป็นวิธีที่ง่ายที่สุดในการค้นหาข้อมูลใน array ซึ่งไม่จำเป็นต้องเรียงลำดับข้อมูลก่อน โค้ดจะเริ่มต้นที่ตัวแรกของ array และเปรียบเทียบทีละตัวจนกระทั่งพบข้อมูลที่ต้องการหรือจนกว่าจะค้นหาทั้งหมดแล้วไม่พบ:


public class SearchExample {
    public static int linearSearch(int[] array, int key) {
        for (int i = 0; i < array.length; i++) {
            if (array[i] == key) {
                return i; // คืนค่าดัชนีที่พบ key
            }
        }
        return -1; // ไม่พบ key ใน array
    }

    public static void main(String[] args) {
        int[] data = {3, 10, 5, 24, 45};
        int key = 24;
        int result = linearSearch(data, key);
        if (result != -1) {
            System.out.println("Found " + key + " at index: " + result);
        } else {
            System.out.println("Key not found");
        }
    }
}

#2. การค้นหาแบบไบนารี (Binary Search)  Arrays.binarySearch(data, key);
#การค้นหาแบบไบนารีเป็นวิธีที่มีประสิทธิภาพสูงกว่าเมื่อข้อมูลใน array มีการเรียงลำดับอยู่แล้ว โดยจะทำการแบ่งข้อมูลออกเป็นสองส่วนและเลือกส่วนที่อาจมีข้อมูลที่ต้องการ ขั้นตอนนี้จะทำซ้ำจนกว่าจะหาข้อมูลเจอหรือข้อมูลหมด:

import java.util.Arrays;

public class SearchExample {
    public static void main(String[] args) {
        int[] data = {3, 5, 10, 24, 45}; // ข้อมูลต้องเรียงลำดับก่อน
        int key = 24;
        int result = Arrays.binarySearch(data, key);
        if (result >= 0) {
            System.out.println("Found " + key + " at index: " + result);
        } else {
            System.out.println("Key not found");
        }
    }
}
=================================================================================
#ใน Java, แนวคิดของ enumeration หรือ enum คือการใช้ประเภทข้อมูลพิเศษที่ช่วยให้คุณกำหนดชุดค่าคงที่ (constant) ที่ตายตัวภายใต้ประเภทเดียวกัน นั่นคือ enum สามารถใช้เพื่อแทนกลุ่มของค่าที่ตายตัว เช่น วันในสัปดาห์ ระดับสี หรือแม้กระทั่งสถานะต่างๆ ภายในโปรแกรม

#คุณสมบัติหลักของ enum
#Type-safe: Enum ให้ความปลอดภัยในการพิมพ์ข้อมูล (type safety) ทำให้คุณไม่สามารถกำหนดหรือเปรียบเทียบค่า enum ด้วยค่าที่ไม่ถูกต้องได้
#ประสิทธิภาพ: Java จัดการค่า enum เป็น static และ final ซึ่งมีประสิทธิภาพสูง
#การประกาศและใช้งาน enum
#นี่คือตัวอย่างของการประกาศ enum สำหรับวันในสัปดาห์:


public enum Day {
    SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY
}

#คุณสามารถใช้ enum นี้ในโปรแกรมได้ดังนี้:


public class TestEnum {
    Day day;

    public TestEnum(Day day) {
        this.day = day;
    }

    public void tellItLikeItIs() {
        switch (day) {
            case MONDAY:
                System.out.println("Mondays are bad.");
                break;
            case FRIDAY:
                System.out.println("Fridays are better.");
                break;
            case SATURDAY: case SUNDAY:
                System.out.println("Weekends are best.");
                break;
            default:
                System.out.println("Midweek days are so-so.");
                break;
        }
    }

    public static void main(String[] args) {
        TestEnum firstDay = new TestEnum(Day.MONDAY);
        firstDay.tellItLikeItIs();
        TestEnum thirdDay = new TestEnum(Day.WEDNESDAY);
        thirdDay.tellItLikeItIs();
        TestEnum fifthDay = new TestEnum(Day.FRIDAY);
        fifthDay.tellItLikeItIs();
        TestEnum sixthDay = new TestEnum(Day.SATURDAY);
        sixthDay.tellItLikeItIs();
        TestEnum seventhDay = new TestEnum(Day.SUNDAY);
        seventhDay.tellItLikeItIs();
    }
}

#ขั้นสูงกว่า: Enum กับ Attributes และ Methods
#Enum ใน Java สามารถมี fields, methods และ constructors เช่นเดียวกับ class ปกติ เช่น คุณสามารถใช้ enum สำหรับการจัดการข้อมูลที่มีคุณสมบัติเพิ่มเติมได้:


public enum Color {
    RED("Red"), GREEN("Green"), BLUE("Blue");

    private final String colorName;

    // Constructor
    Color(String colorName) {
        this.colorName = colorName;
    }

    public String getColorName() {
        return this.colorName;
    }
}

public class TestColors {
    public static void main(String[] args) {
        Color myFavoriteColor = Color.BLUE;
        System.out.println("My favorite color is " + myFavoriteColor.getColorName());
    }
}

#ในตัวอย่างนี้, แต่ละ enum value มี attribute colorName ที่สามารถเข้าถึงได้ผ่าน method getColorName().
