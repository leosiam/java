#การเขียนฟังก์ชันใน Java นั้นเรียกว่าเขียน "เมธอด" (method). เมธอดคือฟังก์ชันหรือหน่วยงานภายในคลาสที่ใช้ในการดำเนินการหรือคำนวณและมีการรับส่งค่ากลับ. เมธอดสามารถมีพารามิเตอร์หรือไม่มีก็ได้ และสามารถคืนค่ากลับเป็นประเภทข้อมูลใดๆ หรือไม่คืนค่ากลับเลย (void) ขึ้นอยู่กับการนิยาม.

#การนิยามเมธอด
#เมธอดใน Java ประกอบด้วยส่วนต่างๆ ดังนี้:

#ตัวกำหนดการเข้าถึง (Access Modifier): กำหนดขอบเขตการเข้าถึง เช่น public, private
#ประเภทข้อมูลที่คืนกลับ (Return Type): ประเภทข้อมูลที่เมธอดจะคืนกลับ เช่น int, String, void ถ้าไม่มีการคืนค่ากลับ
#ชื่อเมธอด: ชื่อที่ใช้เรียกเมธอด
#พารามิเตอร์ (Parameters): รายการพารามิเตอร์ที่รับเข้ามา ใช้ในการประมวลผลภายในเมธอด (ถ้ามี)
#ตัวอย่างการเขียนเมธอด
#ตัวอย่างเมธอดที่ไม่มีพารามิเตอร์และไม่คืนค่า

public class MyClass {
    public void displayMessage() {
        System.out.println("Hello, this is a method!");
    }
}

#ตัวอย่างเมธอดที่มีพารามิเตอร์และคืนค่า

public class MyClass {
    public int multiply(int a, int b) {
        return a * b;
    }
}

#การเรียกใช้เมธอด
#เมื่อต้องการเรียกใช้เมธอดใน Java คุณต้องมีอินสแตนซ์ของคลาส (หากเมธอดไม่ได้ถูกประกาศเป็น static) แล้วเรียกใช้เมธอดผ่านอินสแตนซ์นั้น:

public class Main {
    public static void main(String[] args) {
        MyClass myClass = new MyClass();
        myClass.displayMessage(); // การเรียกเมธอดที่ไม่มีพารามิเตอร์และไม่คืนค่า

        int result = myClass.multiply(10, 20); // การเรียกเมธอดที่มีพารามิเตอร์และคืนค่า
        System.out.println("Result of multiplication: " + result);
    }
}

==============================================================================================
#ตัวแปร Global
#ตัวแปร global คือตัวแปรที่ถูกประกาศนอกเมธอดใดๆ ภายในคลาส และสามารถเข้าถึงได้จากทุกๆ ที่ในคลาสนั้น หรือจากคลาสอื่นถ้ามีการตั้งค่าการเข้าถึงเหมาะสม (เช่น public, protected). ตัวแปร global มักถูกใช้เพื่อเก็บค่าที่ต้องการใช้งานร่วมกันในหลายๆ เมธอดหรือโดยหลายๆ อินสแตนซ์ของคลาส.

#ตัวอย่าง:

public class TestClass {
    public static int globalNumber = 5;  // Global variable

    public void printNumber() {
        System.out.println(globalNumber);
    }
}

#ตัวแปร Local
#ตัวแปร local คือตัวแปรที่ถูกประกาศภายในเมธอดหรือบล็อกโค้ด (เช่น loops หรือ conditional statements) และสามารถเข้าถึงได้เฉพาะในบริเวณที่มันถูกประกาศเท่านั้น. ตัวแปร local มีขอบเขตการใช้งานที่จำกัดและจะไม่ถูกเก็บไว้เมื่อการดำเนินการภายในบล็อกโค้ดที่ประกาศไว้สิ้นสุดลง.

#ตัวอย่าง:


public class TestClass {
    public void performAction() {
        int localVar = 10;  // Local variable
        System.out.println(localVar);
    }
}

#การเข้าถึงและขอบเขต
#Global Variables: สามารถเข้าถึงได้จากเมธอดใดๆ ภายในคลาสที่ประกาศหรือจากคลาสอื่นถ้ามีการเข้าถึงที่เหมาะสม
#Local Variables: เข้าถึงได้เฉพาะภายในบล็อกโค้ดหรือเมธอดที่ตัวแปรนั้นถูกประกาศ
#ประเด็นเรื่องการใช้งาน
#Global Variables:
#สะดวกในการเข้าถึงจากหลายๆ ที่ แต่อาจเพิ่มความซับซ้อนในการติดตามการเปลี่ยนแปลงค่า
#เพิ่มความเสี่ยงต่อการถูกแก้ไขโดยไม่ได้ตั้งใจจากหลายๆ เมธอด
#Local Variables:
#ช่วยจำกัดการเข้าถึงข้อมูล เพิ่มความปลอดภัยและช่วยลดข้อผิดพลาดจากการแก้ไขข้อมูลโดยไม่ตั้งใจ
#สร้างใหม่ทุกครั้งที่เมธอดถูกเรียก ซึ่งอาจส่งผลดีต่อการจัดการความจำ

==========================================================================================
#ใน Java, การจัดระเบียบโค้ดเป็นโมดูลไม่ได้หมายถึงโมดูลในความหมายของภาษาอื่นๆ อย่าง Python 
#ที่แต่ละไฟล์สามารถเป็นโมดูลได้โดยตรง แต่ Java ใช้คลาสเป็นหน่วยพื้นฐานในการจัดระเบียบโค้ด และใช้แพ็คเกจ (packages) เพื่อจัดกลุ่มคลาสที่เกี่ยวข้องกันเข้าด้วยกันเป็นโมดูล

#การใช้ Packages ใน Java
#การใช้แพ็คเกจใน Java ช่วยให้สามารถจัดการโครงสร้างของโค้ดได้ดีขึ้น โดยแยกโค้ดที่ทำงานคล้ายกันออกเป็นหมวดหมู่ นอกจากนี้ยังช่วยในการจัดการกับ namespace ของคลาสเพื่อหลีกเลี่ยงการชนกันของชื่อคลาส

#ตัวอย่างการสร้างแพ็คเกจ
#การประกาศแพ็คเกจ: ในแต่ละไฟล์ Java, คุณสามารถระบุแพ็คเกจที่ไฟล์นั้นอยู่ด้วยการใช้คำสั่ง package ที่บรรทัดแรกของไฟล์

// File: MyClass.java
package com.example.mypackage;

public class MyClass {
    // รายละเอียดของคลาส
}

#การอ้างอิงคลาสจากแพ็คเกจอื่น: ใช้คำสั่ง import เพื่อนำเข้าคลาสจากแพ็คเกจอื่น

// File: MainClass.java
import com.example.mypackage.MyClass;

public class MainClass {
    public static void main(String[] args) {
        MyClass myClass = new MyClass();
        // สามารถใช้ MyClass ได้เนื่องจากได้ทำการ import
    }
}

#โครงสร้างของแพ็คเกจ
#โครงสร้างโฟลเดอร์บนระบบไฟล์ควรตรงกับโครงสร้างแพ็คเกจในโค้ด
#สำหรับโค้ดใน package com.example.mypackage; คลาสจะถูกเก็บอยู่ในโฟลเดอร์ com/example/mypackage/ ในระบบไฟล์
#สิทธิ์การเข้าถึง (Access Modifiers)
#การจัดกลุ่มคลาสในแพ็คเกจช่วยให้สามารถควบคุมการเข้าถึงได้ง่ายขึ้น:

#ตัวแปรหรือเมธอดที่ถูกประกาศเป็น public สามารถเข้าถึงได้จากคลาสใดก็ได้
#ตัวแปรหรือเมธอดที่ถูกประกาศเป็น protected สามารถเข้าถึงได้จากคลาสในแพ็คเกจเดียวกันและจาก subclass
#ตัวแปรหรือเมธอดที่ไม่มีการระบุ (package-private หรือ default) สามารถเข้าถึงได้จากคลาสในแพ็คเกจเดียวกันเท่านั้น
#ตัวแปรหรือเมธอดที่ถูกประกาศเป็น private สามารถเข้าถึงได้ภายในคลาสนั้นๆ เท่านั้น
